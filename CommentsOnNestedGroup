// ... (existing code)

// Define the handler for adding a group condition
const addGroupCondition = () => {
    // Add a new group condition object to the state array
    setConditions([
        ...conditions,
        {
            type: 'groupCondition',
            conditions: [
                {
                    type: 'condition', // Default to 'condition' for nested conditions
                    selectCondition: 'select',
                    requestAttribute: 'select',
                    requestOp: 'select',
                    requestValue: '',
                    groupAttribute: 'select',
                    groupOp: 'select',
                    groupValue: '',
                    identityAttribute: 'select',
                    identityOp: 'select',
                    identityValue: '',
                    locationAttribute: 'select',
                    locationOp: 'select',
                    locationValue: ''
                }
            ],
            selectOperation: 'select'
        }
    ]);
};

// Define the handler for adding a nested condition within a group
const addNestedCondition = (groupIndex) => {
    // Make a copy of the state array
    let newConditions = [...conditions];
    // Add a new nested condition object to the conditions array of the group condition object at the given index
    newConditions[groupIndex].conditions.push({
        type: 'condition',
        selectCondition: 'select',
        requestAttribute: 'select',
        requestOp: 'select',
        requestValue: '',
        groupAttribute: 'select',
        groupOp: 'select',
        groupValue: '',
        identityAttribute: 'select',
        identityOp: 'select',
        identityValue: '',
        locationAttribute: 'select',
        locationOp: 'select',
        locationValue: ''
    });
    // Set the new state array
    setConditions(newConditions);
};

// Define the handler for adding a nested group within a group
const addNestedGroup = (groupIndex) => {
    // Make a copy of the state array
    let newConditions = [...conditions];
    // Add a new nested group condition object to the conditions array of the group condition object at the given index
    newConditions[groupIndex].conditions.push({
        type: 'groupCondition',
        conditions: [
            {
                type: 'condition', // Default to 'condition' for nested conditions
                selectCondition: 'select',
                requestAttribute: 'select',
                requestOp: 'select',
                requestValue: '',
                groupAttribute: 'select',
                groupOp: 'select',
                groupValue: '',
                identityAttribute: 'select',
                identityOp: 'select',
                identityValue: '',
                locationAttribute: 'select',
                locationOp: 'select',
                locationValue: ''
            }
        ],
        selectOperation: 'select'
    });
    // Set the new state array
    setConditions(newConditions);
};

// ... (existing code)

// Use the react-bootstrap components in the return part
return (
    <Container className="border p-3">
        <Row>
            <Col>
                <Button variant="dark" onClick={addCondition}>Add Condition</Button>
                <Button variant="dark" onClick={addGroupCondition}>Add Group Condition</Button>
            </Col>
        </Row>

        {conditions.map((condition, index) => (
            condition.type === 'condition' ? (
                // Handle condition rendering here
                <Row key={index} className="border my-3">
                    {/* ... (existing code) */}
                </Row>
            ) : (
                // Handle group condition rendering here
                <Row key={index} className="border my-3">
                    {/* ... (existing code) */}
                    <Col md={3}>
                        <Button variant="dark" onClick={() => addNestedCondition(index)}>
                            Add Nested Condition
                        </Button>
                        <Button variant="dark" onClick={() => addNestedGroup(index)}>
                            Add Nested Group
                        </Button>
                    </Col>
                    {/* ... (existing code) */}
                </Row>
            )
        ))}
        {/* ... (existing code) */}
    </Container>
);
