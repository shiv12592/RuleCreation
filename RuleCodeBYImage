import React, { useState } from 'react';

const MyComponent = () => {
    const [conditions, setConditions] = useState([]);

    // The data for the select fields
    const selectCondition = ['select', 'Request', 'Group'];
    const requestAttribute = ['select', 'rqAtt1', 'reqAtt2'];
    const groupAttribute = ['select', 'grpAtt1', 'grpAtt2'];
    const requestOp = ['select', 'equal', 'noEqual'];
    const groupOp = ['select', 'and', 'or', 'not'];
    const selectOperation = ['select', 'AND', 'OR'];

    const addCondition = () => {
        setConditions([...conditions, { type: 'condition', data: {} }]);
    };

    const addGroupCondition = () => {
        setConditions([...conditions, { type: 'group', data: {}, conditions: [] }]);
    };

    const handleChange = (e, index, field, type, i) => {
        // Update the state with the input value
        const newConditions = [...conditions];
        if (type === 'condition') {
            newConditions[index].data[field] = e.target.value;
        } else if (type === 'group') {
            newConditions[index].data[field] = e.target.value;
        } else if (type === 'nested') {
            newConditions[index].conditions[i].data[field] = e.target.value;
        }
        setConditions(newConditions);
    };

    const handleAddNestedCondition = (index) => {
        // Add a nested condition to a group condition
        const newConditions = [...conditions];
        newConditions[index].conditions.push({ type: 'condition', data: {} });
        setConditions(newConditions);
    };

    const handleRemoveRow = (index, type) => {
        // Remove a row from the state
        const newConditions = [...conditions];
        if (type === 'condition') {
            newConditions.splice(index, 1);
        } else if (type === 'group') {
            newConditions.splice(index, 1);
        } else if (type === 'nested') {
            newConditions[index].conditions.pop();
        }
        setConditions(newConditions);
    };

    const handleSubmit = () => {
        console.log(JSON.stringify(conditions));
    };

    return (
        <div>
            <button onClick={addCondition}>Add Condition</button>
            <button onClick={addGroupCondition}>Add Group Condition</button>

            {conditions.map((condition, index) => (
                condition.type === 'condition' ? 
                    <ConditionRow 
                        key={index} 
                        index={index} 
                        condition={condition} 
                        selectCondition={selectCondition}
                        requestAttribute={requestAttribute}
                        requestOp={requestOp}
                        selectOperation={selectOperation}
                        handleChange={handleChange}
                        handleRemoveRow={handleRemoveRow}
                    /> :
                    <GroupConditionRow 
                        key={index} 
                        index={index} 
                        groupCondition={condition} 
                        selectCondition={selectCondition}
                        groupAttribute={groupAttribute}
                        groupOp={groupOp}
                        selectOperation={selectOperation}
                        handleChange={handleChange}
                        handleAddNestedCondition={handleAddNestedCondition}
                        handleRemoveRow={handleRemoveRow}
                    />
            ))}

            <button onClick={handleSubmit}>Submit</button>
        </div>
    );
};

const ConditionRow = ({ index, condition, selectCondition, requestAttribute, requestOp, selectOperation, handleChange, handleRemoveRow }) => {
    return (
        <div>
            {index > 0 && (
                <div>
                    <label>Select Operation</label>
                    <select value={condition.data.selectOperation || 'select'} onChange={(e) => handleChange(e, index, 'selectOperation', 'condition')}>
                        {selectOperation.map((op, i) => (
                            <option key={i} value={op}>{op}</option>
                        ))}
                    </select>
                </div>
            )}
            <div>
                <label>Source</label>
                <select value={condition.data.source || 'select'} onChange={(e) => handleChange(e, index, 'source', 'condition')}>
                    {selectCondition.map((cond, i) => (
                        <option key={i} value={cond}>{cond}</option>
                    ))}
                </select>
            </div>
            {condition.data.source === 'Request' && (
                <div>
                    <label>Request Attribute</label>
                    <select value={condition.data.requestAttribute || 'select'} onChange={(e) => handleChange(e, index, 'requestAttribute', 'condition')}>
                        {requestAttribute.map((attr, i) => (
                            <option key={i} value={attr}>{attr}</option>
                        ))}
                    </select>
                    <label>Request Op</label>
                    <select value={condition.data.requestOp || 'select'} onChange={(e) => handleChange(e, index, 'requestOp', 'condition')}>
                        {requestOp.map((op, i) => (
                            <option key={i} value={op}>{op}</option>
                        ))}
                    </select>
                    <label>Request Value</label>
                    <input type="text" value={condition.data.requestValue || ''} onChange={(e) => handleChange(e, index, 'requestValue', 'condition')} />
                </div>
            )}
            <button onClick={() => handleRemoveRow(index, 'condition')}>Remove Row</button>
        </div>
    );
};

const GroupConditionRow = ({ index, groupCondition, selectCondition, groupAttribute, groupOp, selectOperation, handleChange, handleAddNestedCondition, handleRemoveRow }) => {
    return (
        <div>
            {index > 0 && (
                <div>
                    <label>Select Operation</label>
                    <select value={groupCondition.data.selectOperation || 'select'} onChange={(e) => handleChange(e, index, 'selectOperation', 'group')}>
                        {selectOperation.map((op, i) => (
                            <option key={i} value={op}>{op}</option>
                        ))}
                    </select>
                </div>
            )}
            <div>
                <label>Source</label>
                <select value={groupCondition.data.source || 'select'} onChange={(e) => handleChange(e, index, 'source', 'group')}>
                    {selectCondition.map((cond, i) => (
                        <option key={i} value={cond}>{cond}</option>
                    ))}
                </select>
            </div>
            {groupCondition.data.source === 'Group' && (
                <div>
                    <label>Group Attribute</label>
                    <select value={groupCondition.data.groupAttribute || 'select'} onChange={(e) => handleChange(e, index, 'groupAttribute', 'group')}>
                        {groupAttribute.map((attr, i) => (
                            <option key={i} value={attr}>{attr}</option>
                        ))}
                    </select>
                    <label>Group Op</label>
                    <select value={groupCondition.data.groupOp || 'select'} onChange={(e) => handleChange(e, index, 'groupOp', 'group')}>
                        {groupOp.map((op, i) => (
                            <option key={i} value={op}>{op}</option>
                        ))}
                    </select>
                    <label>Group Value</label>
                    <input type="text" value={groupCondition.data.groupValue || ''} onChange={(e) => handleChange(e, index, 'groupValue', 'group')} />
                </div>
            )}
            <button onClick={() => handleAddNestedCondition(index)}>Add Condition</button>
            {groupCondition.conditions.map((condition, i) => (
                <ConditionRow 
                    key={i} 
                    index={i} 
                    condition={condition} 
                    selectCondition={selectCondition}
                    requestAttribute={requestAttribute}
                    requestOp={requestOp}
                    selectOperation={selectOperation}
                    handleChange={(e, index, field) => handleChange(e, index, field, 'nested', i)}
                    handleRemoveRow={() => handleRemoveRow(index, 'nested')}
                />
            ))}
            <button onClick={() => handleRemoveRow(index, 'group')}>Remove Row</button>
        </div>
    );
};

export default MyComponent;
