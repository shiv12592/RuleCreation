// Define the handler for changing the value of a field in a condition
const handleChange = (index, field, value) => {
    // Make a copy of the state array
    let newConditions = [...conditions];
    // Update the value of the field in the condition object at the given index
    newConditions[index][field] = value;
    // If the field is selectCondition, reset the other fields to their initial values
    if (field === 'selectCondition') {
        newConditions[index].requestAttribute = 'select';
        newConditions[index].requestOp = 'select';
        newConditions[index].requestValue = '';
        newConditions[index].groupAttribute = 'select';
        newConditions[index].groupOp = 'select';
        newConditions[index].groupValue = '';
    }
    // Set the new state array
    setConditions(newConditions);
};

// Define the handler for changing the value of a field in a nested condition
const handleNestedChange = (index, nestedIndex, field, value) => {
    // Make a copy of the state array
    let newConditions = [...conditions];
    // Update the value of the field in the nested condition object at the given indexes
    newConditions[index].conditions[nestedIndex][field] = value;
    // If the field is selectCondition, reset the other fields to their initial values
    if (field === 'selectCondition') {
        newConditions[index].conditions[nestedIndex].requestAttribute = 'select';
        newConditions[index].conditions[nestedIndex].requestOp = 'select';
        newConditions[index].conditions[nestedIndex].requestValue = '';
        newConditions[index].conditions[nestedIndex].groupAttribute = 'select';
        newConditions[index].conditions[nestedIndex].groupOp = 'select';
        newConditions[index].conditions[nestedIndex].groupValue = '';
    }
    // Set the new state array
    setConditions(newConditions);
};
