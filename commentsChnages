import React, { useState } from 'react';

const MyComponent = () => {
    // ... (existing code)

    // Updated handler for adding a group condition
    const addGroupCondition = (index) => {
        // Make a copy of the state array
        let newConditions = [...conditions];

        // Add a new group condition object to the conditions array of the group condition object at the given index
        newConditions[index].conditions.push({
            type: 'groupCondition',
            conditions: [{ selectCondition: 'select', requestAttribute: 'select', requestOp: 'select', requestValue: '', groupAttribute: 'select', groupOp: 'select', groupValue: '', identityAttribute: 'select', identityOp: 'select', identityValue: '', locationAttribute: 'select', locationOp: 'select', locationValue: '' }],
            selectOperation: 'select'
        });

        // Set the new state array
        setConditions(newConditions);
    };

    // ... (existing code)

    return (
        <div>
            <button onClick={addCondition}>Add Condition</button>
            <button onClick={() => addGroupCondition(conditions.length)}>Add Group Condition</button>

            {conditions.map((condition, index) => (
                // ... (existing code)

                {condition.type === "groupCondition" && (
                    <div key={index}>
                        {index > 0 && <div>Select Operation : <select value={condition.selectOperation} onChange={(e) => handleChange(index, 'selectOperation', e.target.value)}>
                            {selectOperationOptions.map(option => <option key={option} value={option}>{option}</option>)}
                        </select></div>}
                        <button onClick={() => addNestedCondition(index)}>Add Condition</button>
                        <button onClick={() => addGroupCondition(index)}>Add Group Condition</button>
                        {condition.conditions.map((nestedCondition, nestedIndex) => (
                            <div key={nestedIndex}>
                                {nestedIndex > 0 && <div>Select Operation : <select value={nestedCondition.selectOperation} onChange={(e) => handleNestedChange(index, nestedIndex, 'selectOperation', e.target.value)}>
                                    {selectOperationOptions.map(option => <option key={option} value={option}>{option}</option>)}
                                </select></div>}
                                Source : <select value={nestedCondition.selectCondition} onChange={(e) => handleNestedChange(index, nestedIndex, 'selectCondition', e.target.value)}>
                                    {selectConditionOptions.map(option => <option key={option} value={option}>{option}</option>)}
                                </select>
                                {nestedCondition.selectCondition === 'Request' && (
                                    <>
                                        {/* ... (existing code) */}
                                    </>
                                )}
                                {nestedCondition.selectCondition === 'group' && (
                                    <>
                                        {/* ... (existing code) */}
                                    </>
                                )}
                                {nestedCondition.selectCondition === 'identity' && (
                                    <>
                                        {/* ... (existing code) */}
                                    </>
                                )}
                                {nestedCondition.selectCondition === 'location' && (
                                    <>
                                        {/* ... (existing code) */}
                                    </>
                                )}
                                <button onClick={() => removeNestedCondition(index, nestedIndex)}>Remove Row</button>
                            </div>
                        ))}
                        <button onClick={() => removeGroupCondition(index)}>Remove Group</button>
                    </div>
                )}

                // ... (existing code)
            ))}

            <button onClick={handleSubmit}>Submit</button>
        </div>
    );
};








===================================================

// ... (existing code)

{condition.type === "condition" ? 
    <div key={index}>
        {index > 0 && <div>Select Operation : <select value={condition.selectOperation} onChange={(e) => handleChange(index, 'selectOperation', e.target.value)}>
            {selectOperationOptions.map(option => <option key={option} value={option}>{option}</option>)}
        </select></div>}
        Source : <select value={condition.selectCondition} onChange={(e) => handleChange(index, 'selectCondition', e.target.value)}>
            {selectConditionOptions.map(option => <option key={option} value={option}>{option}</option>)}
        </select>
        {condition.selectCondition === 'Request' && <>
            Request Attribute : <select value={condition.requestAttribute} onChange={(e) => handleChange(index, 'requestAttribute', e.target.value)}>
                {requestAttributeOptions.map(option => <option key={option} value={option}>{option}</option>)}
            </select>
            Request Operation : <select value={condition.requestOp} onChange={(e) => handleChange(index, 'requestOp', e.target.value)}>
                {requestOpOptions.map(option => <option key={option} value={option}>{option}</option>)}
            </select>
            Request Value : <input type="text" value={condition.requestValue} onChange={(e) => handleChange(index, 'requestValue', e.target.value)} />
        </>}
        {condition.selectCondition === 'group' && <>
            Group Attribute : <select value={condition.groupAttribute} onChange={(e) => handleChange(index, 'groupAttribute', e.target.value)}>
                {groupAttributeOptions.map(option => <option key={option} value={option}>{option}</option>)}
            </select>
            Group Operation : <select value={condition.groupOp} onChange={(e) => handleChange(index, 'groupOp', e.target.value)}>
                {groupOpOptions.map(option => <option key={option} value={option}>{option}</option>)}
            </select>
            Group Value : <input type="text" value={condition.groupValue} onChange={(e) => handleChange(index, 'groupValue', e.target.value)} />
        </>}
        {condition.selectCondition === 'identity' && <>
            Identity Attribute : <select value={condition.identityAttribute} onChange={(e) => handleChange(index, 'identityAttribute', e.target.value)}>
                {identityAttributeOptions.map(option => <option key={option} value={option}>{option}</option>)}
            </select>
            Identity Operation : <select value={condition.identityOp} onChange={(e) => handleChange(index, 'identityOp', e.target.value)}>
                {identityOpOptions.map(option => <option key={option} value={option}>{option}</option>)}
            </select>
            Identity Value : <input type="text" value={condition.identityValue} onChange={(e) => handleChange(index, 'identityValue', e.target.value)} />
        </>}
        {condition.selectCondition === 'location' && <>
            Location Attribute : <select value={condition.locationAttribute} onChange={(e) => handleChange(index, 'locationAttribute', e.target.value)}>
                {locationAttributeOptions.map(option => <option key={option} value={option}>{option}</option>)}
            </select>
            Location Operation : <select value={condition.locationOp} onChange={(e) => handleChange(index, 'locationOp', e.target.value)}>
                {locationOpOptions.map(option => <option key={option} value={option}>{option}</option>)}
            </select>
            Location Value : <input type="text" value={condition.locationValue} onChange={(e) => handleChange(index, 'locationValue', e.target.value)} />
        </>}
        <button onClick={() => removeCondition(index)}>Remove Row</button>
    </div> :
    // Handle group condition rendering here
    <div key={index}>
        {index > 0 && <div>Select Operation : <select value={condition.selectOperation} onChange={(e) => handleChange(index, 'selectOperation', e.target.value)}>
            {selectOperationOptions.map(option => <option key={option} value={option}>{option}</option>)}
        </select></div>}
        <button onClick={() => addNestedCondition(index)}>Add Condition</button>
        <button onClick={() => addGroupCondition(index)}>Add Group Condition</button>
        {condition.conditions.map((nestedCondition, nestedIndex) => (
            <div key={nestedIndex}>
                {nestedIndex > 0 && <div>Select Operation : <select value={nestedCondition.selectOperation} onChange={(e) => handleNestedChange(index, nestedIndex, 'selectOperation', e.target.value)}>
                    {selectOperationOptions.map(option => <option key={option} value={option}>{option}</option>)}
                </select></div>}
                Source : <select value={nestedCondition.selectCondition} onChange={(e) => handleNestedChange(index, nestedIndex, 'selectCondition', e.target.value)}>
                    {selectConditionOptions.map(option => <option key={option} value={option}>{option}</option>)}
                </select>
                {nestedCondition.selectCondition === 'Request' && (
                    <>
                        Request Attribute : <select value={nestedCondition.requestAttribute} onChange={(e) => handleNestedChange(index, nestedIndex, 'requestAttribute', e.target.value)}>
                            {requestAttributeOptions.map(option => <option key={option} value={option}>{option}</option>)}
                        </select>
                        Request Operation : <select value={nestedCondition.requestOp} onChange={(e) => handleNestedChange(index, nestedIndex, 'requestOp', e.target.value)}>
                            {requestOpOptions.map(option => <option key={option                        } value={option}>{option}</option>)}
                    </select>
                    Request Value : <input type="text" value={nestedCondition.requestValue} onChange={(e) => handleNestedChange(index, nestedIndex, 'requestValue', e.target.value)} />
                </>}
                {nestedCondition.selectCondition === 'group' && (
                    <>
                        Group Attribute : <select value={nestedCondition.groupAttribute} onChange={(e) => handleNestedChange(index, nestedIndex, 'groupAttribute', e.target.value)}>
                            {groupAttributeOptions.map(option => <option key={option} value={option}>{option}</option>)}
                        </select>
                        Group Operation : <select value={nestedCondition.groupOp} onChange={(e) => handleNestedChange(index, nestedIndex, 'groupOp', e.target.value)}>
                            {groupOpOptions.map(option => <option key={option} value={option}>{option}</option>)}
                        </select>
                        Group Value : <input type="text" value={nestedCondition.groupValue} onChange={(e) => handleNestedChange(index, nestedIndex, 'groupValue', e.target.value)} />
                    </>
                )}
                {nestedCondition.selectCondition === 'identity' && (
                    <>
                        Identity Attribute : <select value={nestedCondition.identityAttribute} onChange={(e) => handleNestedChange(index, nestedIndex, 'identityAttribute', e.target.value)}>
                            {identityAttributeOptions.map(option => <option key={option} value={option}>{option}</option>)}
                        </select>
                        Identity Operation : <select value={nestedCondition.identityOp} onChange={(e) => handleNestedChange(index, nestedIndex, 'identityOp', e.target.value)}>
                            {identityOpOptions.map(option => <option key={option} value={option}>{option}</option>)}
                        </select>
                        Identity Value : <input type="text" value={nestedCondition.identityValue} onChange={(e) => handleNestedChange(index, nestedIndex, 'identityValue', e.target.value)} />
                    </>
                )}
                {nestedCondition.selectCondition === 'location' && (
                    <>
                        Location Attribute : <select value={nestedCondition.locationAttribute} onChange={(e) => handleNestedChange(index, nestedIndex, 'locationAttribute', e.target.value)}>
                            {locationAttributeOptions.map(option => <option key={option} value={option}>{option}</option>)}
                        </select>
                        Location Operation : <select value={nestedCondition.locationOp} onChange={(e) => handleNestedChange(index, nestedIndex, 'locationOp', e.target.value)}>
                            {locationOpOptions.map(option => <option key={option} value={option}>{option}</option>)}
                        </select>
                        Location Value : <input type="text" value={nestedCondition.locationValue} onChange={(e) => handleNestedChange(index, nestedIndex, 'locationValue', e.target.value)} />
                    </>
                )}
                <button onClick={() => removeNestedCondition(index, nestedIndex)}>Remove Row</button>
            </div>
        ))}
        <button onClick={() => removeGroupCondition(index)}>Remove Group</button>
    </div>
))}

<button onClick={handleSubmit}>Submit</button>
</div>
);
};



