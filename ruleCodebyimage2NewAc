import React, { useState } from 'react';

const MyComponent = () => {
    // Define the initial state for the conditions
    const [conditions, setConditions] = useState([]);

    // Define the handler for adding a condition
    const addCondition = () => {
        // Add a new condition object to the state array
        setConditions([...conditions, { type: 'condition', selectCondition: 'select', requestAttribute: 'select', requestOp: 'select', requestValue: '' }]);
    };

    // Define the handler for adding a group condition
    const addGroupCondition = () => {
        // Add a new group condition object to the state array
        setConditions([...conditions, { type: 'groupCondition', conditions: [{ selectCondition: 'select', requestAttribute: 'select', requestOp: 'select', requestValue: '' }], selectOperation : "select" }]);
    };

    // Define the handler for submitting the form
    const handleSubmit = () => {
        // Log the state array as JSON to the console
        console.log(JSON.stringify(conditions));
    };

    // Define the handler for changing the value of a field in a condition
    const handleChange = (index, field, value) => {
        // Make a copy of the state array
        let newConditions = [...conditions];
        // Update the value of the field in the condition object at the given index
        newConditions[index][field] = value;
        // Set the new state array
        setConditions(newConditions);
    };

    // Define the handler for changing the value of a field in a nested condition
    const handleNestedChange = (index, nestedIndex, field, value) => {
        // Make a copy of the state array
        let newConditions = [...conditions];
        // Update the value of the field in the nested condition object at the given indexes
        newConditions[index].conditions[nestedIndex][field] = value;
        // Set the new state array
        setConditions(newConditions);
    };

    // Define the handler for adding a nested condition
    const addNestedCondition = (index) => {
        // Make a copy of the state array
        let newConditions = [...conditions];
        // Add a new nested condition object to the conditions array of the group condition object at the given index
        newConditions[index].conditions.push({ selectCondition: 'select', requestAttribute: 'select', requestOp: 'select', requestValue: '' });
        // Set the new state array
        setConditions(newConditions);
    };

    // Define the options for the select fields
    const selectConditionOptions = ['select', 'Request', 'group'];
    const requestAttributeOptions = ['select', 'rqAtt1', 'reqAtt2'];
    const groupAttributeOptions = ['select', 'grpAtt1', 'grpAtt2'];
    const requestOpOptions = ['select', 'equal', 'noEqual'];
    const groupOpOptions = ['select', 'and', 'or', 'not'];
    const selectOperationOptions = ['select', 'AND', 'OR'];

    return (
        <div>
            <button onClick={addCondition}>Add Condition</button>
            <button onClick={addGroupCondition}>Add Group Condition</button>

            {conditions.map((condition, index) => (
                condition.type === "condition" ? 
                <div key={index}>
                    {index > 0 && <div>Select Operation : <select value={condition.selectOperation} onChange={(e) => handleChange(index, 'selectOperation', e.target.value)}>
                        {selectOperationOptions.map(option => <option key={option} value={option}>{option}</option>)}
                    </select></div>}
                    Source : <select value={condition.selectCondition} onChange={(e) => handleChange(index, 'selectCondition', e.target.value)}>
                        {selectConditionOptions.map(option => <option key={option} value={option}>{option}</option>)}
                    </select>
                    {condition.selectCondition === 'Request' && <>
                        Request Attribute : <select value={condition.requestAttribute} onChange={(e) => handleChange(index, 'requestAttribute', e.target.value)}>
                            {requestAttributeOptions.map(option => <option key={option} value={option}>{option}</option>)}
                        </select>
                        Request Operation : <select value={condition.requestOp} onChange={(e) => handleChange(index, 'requestOp', e.target.value)}>
                            {requestOpOptions.map(option => <option key={option} value={option}>{option}</option>)}
                        </select>
                        Request Value : <input type="text" value={condition.requestValue} onChange={(e) => handleChange(index, 'requestValue', e.target.value)} />
                    </>}
                    {condition.selectCondition === 'group' && <>
                        Group Attribute : <select value={condition.groupAttribute} onChange={(e) => handleChange(index, 'groupAttribute', e.target.value)}>
                            {groupAttributeOptions.map(option => <option key={option} value={option}>{option}</option>)}
                        </select>
                        Group Operation : <select value={condition.groupOp} onChange={(e) => handleChange(index, 'groupOp', e.target.value)}>
                            {groupOpOptions.map(option => <option key={option} value={option}>{option}</option>)}
                        </select>
                        Group Value : <input type="text" value={condition.groupValue} onChange={(e) => handleChange(index, 'groupValue', e.target.value)} />
                    </>}
                </div> :
                // Handle group condition rendering here
                <div key={index}>
                    {index > 0 && <div>Select Operation : <select value={condition.selectOperation} onChange={(e) => handleChange(index, 'selectOperation', e.target.value)}>
                        {selectOperationOptions.map(option => <option key={option} value={option}>{option}</option>)}
                    </select></div>}
                    <button onClick={() => addNestedCondition(index)}>Add Condition</button>
                    {condition.conditions.map((nestedCondition, nestedIndex) => (
                        <div key={nestedIndex}>
                            {nestedIndex > 0 && <div>Select Operation : <select value={nestedCondition.selectOperation} onChange={(e) => handleNestedChange(index, nestedIndex, 'selectOperation', e.target.value)}>
                                {selectOperationOptions.map(option => <option key={option} value={option}>{option}</option>)}
                            </select></div>}
                            Source : <select value={nestedCondition.selectCondition} onChange={(e) => handleNestedChange(index, nestedIndex, 'selectCondition', e.target.value)}>
                                {selectConditionOptions.map(option => <option key={option} value={option}>{option}</option>)}
                            </select>
                            {nestedCondition.selectCondition === 'Request' && <>
                                Request Attribute : <select value={nestedCondition.requestAttribute} onChange={(e) => handleNestedChange(index, nestedIndex, 'requestAttribute', e.target.value)}>
                                    {requestAttributeOptions.map(option => <option key={option} value={option}>{option}</option>)}
                                </select>
                                Request Operation : <select value={nestedCondition.requestOp} onChange={(e) => handleNestedChange(index, nestedIndex, 'requestOp', e.target.value)}>
                                    {requestOpOptions.map(option => <option key={option} value={option}>{option}</option>)}
                                </select>
                                Request Value : <input type="text" value={nestedCondition.requestValue} onChange={(e) => handleNestedChange(index, nestedIndex, 'requestValue', e.target.value)} />
                            </>}
                            {nestedCondition.selectCondition === 'group' && <>
                                Group Attribute : <select value={nestedCondition.groupAttribute} onChange={(e) => handleNestedChange(index, nestedIndex, 'groupAttribute', e.target.value)}>
                                    {groupAttributeOptions.map(option => <option key={option} value={option}>{option}</option>)}
                                </select>
                                Group Operation : <select value={nestedCondition.groupOp} onChange={(e) => handleNestedChange(index, nestedIndex, 'groupOp', e.target.value)}>
                                    {groupOpOptions.map(option => <option key={option} value={option}>{option}</option>)}
                                </select>
                                Group Value : <input type="text" value={nestedCondition.groupValue} onChange={(e) => handleNestedChange(index, nestedIndex, 'groupValue', e.target.value)} />
                            </>}
                        </div>
                    ))}
                </div>
            ))}

            <button onClick={handleSubmit}>Submit</button>
        </div>
    );
};

export default MyComponent;
