import React, { useState } from 'react';
import { Container, Row, Col, Label, Select, Button } from 'react-bootstrap';

const MyComponent = () => {
  const [allData, setAllData] = useState([]);
  const [selectConditionOptions] = useState(['default', 'Request', 'group']);
  const [requestAttributeOptions] = useState(['select', 'rqAtt1', 'reqAtt2']);
  const [requestOpOptions] = useState(['default', 'equal', 'noEqual']);
  const [selectOperationOptions] = useState(['default', 'AND', 'OR']);

  const handleAddCondition = () => {
    const conditionRow = {
      selectCondition: 'default',
      requestAttribute: 'select',
      requestOp: 'default',
      requestValue: '',
    };
    setAllData((prevData) => [...prevData, conditionRow]);
  };

  const handleAddGroupCondition = () => {
    const groupConditionRow = {
      selectCondition: 'group',
    };
    setAllData((prevData) => [...prevData, groupConditionRow]);
  };

  const handleAddConditionOperation = () => {
    const conditionOperationRow = {
      selectOperation: 'default',
    };
    setAllData((prevData) => [...prevData, conditionOperationRow]);
  };

  const handleAddGroupConditionOperation = () => {
    const groupConditionOperationRow = {
      selectOperation: 'default',
    };
    setAllData((prevData) => [...prevData, groupConditionOperationRow]);
  };

  const handleSelectConditionChange = (value, index) => {
    setAllData((prevData) => {
      const updatedData = [...prevData];
      updatedData[index].selectCondition = value;
      return updatedData;
    });
  };

  const handleRequestAttributeChange = (value, index) => {
    setAllData((prevData) => {
      const updatedData = [...prevData];
      updatedData[index].requestAttribute = value;
      return updatedData;
    });
  };

  const handleRequestOpChange = (value, index) => {
    setAllData((prevData) => {
      const updatedData = [...prevData];
      updatedData[index].requestOp = value;
      return updatedData;
    });
  };

  const handleRequestValueChange = (e, index) => {
    const { value } = e.target;
    setAllData((prevData) => {
      const updatedData = [...prevData];
      updatedData[index].requestValue = value;
      return updatedData;
    });
  };

  const handleRemoveRow = (index) => {
    setAllData((prevData) => prevData.filter((_, i) => i !== index));
  };

  const handleSelectOperationChange = (value, index) => {
    setAllData((prevData) => {
      const updatedData = [...prevData];
      updatedData[index].selectOperation = value;
      return updatedData;
    });
  };

  const handleAddConditionOperationWithinGroupCondition = (groupConditionIndex) => {
    const conditionRow = {
      selectCondition: 'default',
      requestAttribute: 'select',
      requestOp: 'default',
      requestValue: '',
    };
    setAllData((prevData) => [
      ...prevData.slice(0, groupConditionIndex + 1),
      conditionRow,
      ...prevData.slice(groupConditionIndex + 1),
    ]);
  };

  const handleSubmit = () => {
    console.log(JSON.stringify(allData));
  };

  return (
    <div className="col-md-12">
      <Container className="col-md-12">
        {/* HeaderRow */}
        <Row className="border-bottom">
          <Col md={6}>
            <Label>Add Condition</Label>
            <Button variant="primary" onClick={handleAddCondition}>
              Add Condition
            </Button>
          </Col>
          <Col md={6}>
            <Label>Add Group of Condition</Label>
            <Button variant="primary" onClick={handleAddGroupCondition}>
              Add Group Condition
            </Button>
          </Col>
        </Row>

        {/* AddConditionRow */}
        {allData.map((rowData, index) => {
          if (rowData.selectCondition === 'default' || rowData.selectCondition === 'Request') {
            return (
              <Row key={index} className="border-bottom mt-1 mb-1">
                <Col md={3}>
                  <Label margin-1-lr>Source</Label>
                  <Select
                    value={rowData.selectCondition}
                    onChange={(e) => handleSelectConditionChange(e.target.value, index)}
                  >
                    {selectConditionOptions.map((option) => (
                      <option key={option} value={option}>
                        {option}
                      </option>
                    ))}
                  </Select>
                </Col>
                <Col md={3}>
                  <Label margin-1-lr>Attribute</Label>
                  <Select
                    value={rowData.requestAttribute}
                    onChange={(e) => handleRequestAttributeChange(e.target.value, index)}
                  >
                    {requestAttributeOptions.map((option) => (
                      <option key={option} value={option}>
                        {option}
                      </option>
                    ))}
                  </Select>
                </Col>
                <Col md={3}>
                  <Label>Request Op</Label>
                  <Select value={rowData.requestOp} onChange={(e) => handleRequestOpChange(e.target.value, index)}>
                    {requestOpOptions.map((option) => (
                      <option key={option} value={option}>
                        {option}
                      </option>
                    ))}
                  </Select>
                </Col>
                <Col md={3}>
                  <Label>Value</Label>
                  <input
                    type="text"
                    placeholder="reqValue"
                    value={rowData.requestValue}
                    onChange={(e) => handleRequestValueChange(e, index)}
                  />
                  <Button
                    variant="danger"
                    style={{ color: 'red', backgroundColor: 'light-gray', margin: '1px' }}
                    onClick={() => handleRemoveRow(index)}
                  >
                    Remove The Row
                  </Button>
                </Col>
              </Row>
            );
          } else if (rowData.selectCondition === 'group') {
            return (
              <Row key={index} className="border-bottom mt-1 mb-1">
                <Col md={3}>
                  <Label margin-1-lr>Source</Label>
                  <Select
                    value={rowData.selectCondition}
                    onChange={(e) => handleSelectConditionChange(e.target.value, index)}
                  >
                    {selectConditionOptions.map((option) => (
                      <option key={option} value={option}>
                        {option}
                      </option>
                    ))}
                  </Select>
                </Col>
                <Col md={9}>
                  {/* AddGroupConditionRow */}
                  <Label>Add Condition</Label>
                  <Button
                    variant="primary"
                    onClick={() => handleAddConditionOperationWithinGroupCondition(index)}
                  >
                    Add Condition
                  </Button>
                </Col>
              </Row>
            );
          }
          return null;
        })}

        {/* AddConditionOperationRow */}
        {allData.map((rowData, index) => {
    
          if (rowData.selectOperation) {
            return (
              <Row key={`op-${index}`} className="border-bottom mt-1 mb-1 border-dashed">
                <Col md={12}>
                  <Label>Select Operation</Label>
                  <Select
                    value={rowData.selectOperation}
                    onChange={(e) => handleSelectOperationChange(e.target.value, index)}
                  >
                    {selectOperationOptions.map((option) => (
                      <option key={option} value={option}>
                        {option}
                      </option>
                    ))}
                  </Select>
                </Col>
              </Row>
            );
          }
          return null;
        })}

        {/* Submit Button */}
        <Row className="mt-3">
          <Col md={12}>
            <Button variant="success" onClick={handleSubmit}>
              Submit
            </Button>
          </Col>
        </Row>
      </Container>
    </div>
  );
};

export default MyComponent;
