import React, { useState } from "react";
import {
  Container,
  Row,
  Col,
  Button,
  Label,
  Select,
  Form,
} from "react-bootstrap";

const selectCondition = ["select", "Request", "group"];
const requestAttribute = ["select", "rqAtt1", "reqAtt2"];
const groupAttribute = ["select", "grpAtt1", "grpAtt2"];
const requestOp = ["select", "equal", "noEqual"];
const groupOp = ["select", "and", "or", "not"];
const selectOperation = ["select", "AND", "OR"];

const HeaderRow = ({ onAddCondition, onAddGroupCondition }) => {
  return (
    <Row style={{ border: "1px solid black" }}>
      <Col md={6}>
        <Label>Add Condition</Label>
        <Button
          style={{ backgroundColor: "lightblue" }}
          onClick={onAddCondition}
        >
          Add Condition
        </Button>
      </Col>
      <Col md={6}>
        <Label>Add Group of Condition</Label>
        <Button
          style={{ backgroundColor: "lightblue" }}
          onClick={onAddGroupCondition}
        >
          Add Group Condition
        </Button>
      </Col>
    </Row>
  );
};

const AddConditionRow = ({
  condition,
  attribute,
  operation,
  value,
  onRemove,
  onChange,
}) => {
  return (
    <Row style={{ margin: "1rem", border: "1px solid black" }}>
      <Col md={3}>
        <Label style={{ margin: "1rem" }}>Source</Label>
        <Form.Control as="select" value={condition} onChange={(e) => onChange("condition", e.target.value)}>
          {selectCondition.map((cond) => (
            <option key={cond} value={cond}>
              {cond}
            </option>
          ))}
        </Form.Control>
      </Col>
      <Col md={3}>
        <Label style={{ margin: "1rem" }}>Attribute</Label>
        <Form.Control as="select" value={attribute} onChange={(e) => onChange("attribute", e.target.value)}>
          {condition === "Request"
            ? requestAttribute.map((attr) => (
                <option key={attr} value={attr}>
                  {attr}
                </option>
              ))
            : condition === "group"
            ? groupAttribute.map((attr) => (
                <option key={attr} value={attr}>
                  {attr}
                </option>
              ))
            : null}
        </Form.Control>
      </Col>
      <Col md={3}>
        <Label style={{ margin: "1rem" }}>Operation</Label>
        <Form.Control as="select" value={operation} onChange={(e) => onChange("operation", e.target.value)}>
          {condition === "Request"
            ? requestOp.map((op) => (
                <option key={op} value={op}>
                  {op}
                </option>
              ))
            : condition === "group"
            ? groupOp.map((op) => (
                <option key={op} value={op}>
                  {op}
                </option>
              ))
            : null}
        </Form.Control>
      </Col>
      <Col md={3}>
        <Label style={{ margin: "1rem" }}>Value</Label>
        <Form.Control
          style={{ margin: "1rem" }}
          placeholder="reqValue"
          value={value}
          onChange={(e) => onChange("value", e.target.value)}
        />
        <Button
          style={{
            color: "red",
            backgroundColor: "lightgray",
            margin: "1rem",
          }}
          onClick={onRemove}
        >
          Remove The Row
        </Button>
      </Col>
    </Row>
  );
};

const AddConditionOperationRow = ({
  operation,
  onAddCondition,
  onChange,
}) => {
  return (
    <>
      <Row style={{ border: "1px dashed black" }}>
        <Label>select operation</Label>
        <Form.Control as="select" value={operation} onChange={(e) => onChange(e.target.value)}>
          {selectOperation.map((op) => (
            <option key={op} value={op}>
              {op}
            </option>
          ))}
        </Form.Control>
      </Row>
      <AddConditionRow
        condition="select"
        attribute="select"
        operation="select"
        value=""
        onRemove={onAddCondition}
        onChange={(key, value) => onChange(key, value)}
      />
    </>
  );
};

const AddGroupConditionRow = ({ onAddCondition }) => {
  return (
    <Row style={{ border: "1px solid black" }}>
      <Label>Add Condition</Label>
      <Button
        style={{ backgroundColor: "lightblue" }}
        onClick={onAddCondition}
      >
        Add Condition
      </Button>
    </Row>
  );
};

const AddGroupConditionOperationRow = ({
  operation,
  onAddCondition,
  onChange,
}) => {
  return (
    <>
      <Row style={{ border: "1px dashed black" }}>
        <Label>select operation</Label>
        <Form.Control as="select" value={operation} onChange={(e) => onChange(e.target.value)}>
          {selectOperation.map((op) => (
            <option key={op} value={op}>
              {op}
            </option>
          ))}
        </Form.Control>
      </Row>
      <AddGroupConditionRow onAddCondition={onAddCondition} />
    </>
  );
};

const RuleCreation = () => {
  const [rows, setRows] = useState([]);

  const handleAddCondition = () => {
    setRows([
      ...rows,
      {
        type: "condition",
        condition: "select",
        attribute: "select",
        operation: "select",
        value: "",
      },
    ]);
  };

  const handleAddGroupCondition = () => {
    setRows([
      ...rows,
      {
        type: "group",
        condition: "select",
        attribute: "select",
        operation: "select",
        value: "",
      },
    ]);
  };

  const handleRemoveRow = (index) => {
    setRows(rows.filter((row, i) => i !== index));
  };

  const handleChangeRow = (index, key, value) => {
    setRows(
      rows.map((row, i) =>
        i === index ? { ...row, [key]: value } : row
      )
    );
  };

  const handleAddConditionAfter = (index) => {
    setRows((prevRows) => {
      const newRows = [...prevRows];
      newRows.splice(index + 1, 0, {
        type: "conditionOperation",
        operation: "select",
      });
      return newRows;
    });
  };

  const handleChangeOperation = (index, value) => {
    setRows(
      rows.map((row, i) =>
        i === index ? { ...row, operation: value } : row
      )
    );
  };

  const handleSubmit = () => {
    const allData = rows
      // ... (Previous code)

    .join("+");

    console.log(JSON.stringify({ allData }));
  };

  return (
    <Container>
      <HeaderRow
        onAddCondition={handleAddCondition}
        onAddGroupCondition={handleAddGroupCondition}
      />
      {rows.map((row, i) => {
        const { type, condition, attribute, operation, value } = row;
        return type === "condition" ? (
          <AddConditionRow
            key={i}
            condition={condition}
            attribute={attribute}
            operation={operation}
            value={value}
            onRemove={() => handleRemoveRow(i)}
            onChange={(key, value) => handleChangeRow(i, key, value)}
          />
        ) : type === "group" ? (
          <AddGroupConditionRow
            key={i}
            condition={condition}
            attribute={attribute}
            operation={operation}
            value={value}
            onRemove={() => handleRemoveRow(i)}
            onChange={(key, value) => handleChangeRow(i, key, value)}
          />
        ) : type === "conditionOperation" ? (
          <AddConditionOperationRow
            key={i}
            operation={operation}
            onAddCondition={() => handleAddConditionAfter(i)}
            onChange={(value) => handleChangeOperation(i, value)}
          />
        ) : type === "groupConditionOperation" ? (
          <AddGroupConditionOperationRow
            key={i}
            operation={operation}
            onAddCondition={() => handleAddConditionAfter(i)}
            onChange={(value) => handleChangeOperation(i, value)}
          />
        ) : null;
      })}
      <Button onClick={handleSubmit}>Submit</Button>
    </Container>
  );
};

export default RuleCreation;
