import React, { useState } from "react";

// Define the data for useState
const selectCondition = ["select", "Request", "Group"];
const requestAttribute = ["select", "rqAtt1", "reqAtt2"];
const groupAttribute = ["select", "grpAtt1", "grpAtt2"];
const requestOp = ["select", "equal", "noEqual"];
const groupOp = ["select", "and", "or", "not"];
const selectOperation = ["select", "AND", "OR"];

// Define a custom component for a single row of condition fields
const ConditionRow = ({ source, attribute, op, value, onRemove }) => {
  return (
    <Row className="margin-1-tb line-border">
      <Col md={3}>
        <label className="margin-1-lr">Source</label>
        <text>{source}</text>
      </Col>
      <Col md={3}>
        <label className="margin-1-lr">Attribute</label>
        <select className="margin-lr">{attribute}</select>
      </Col>
      <Col md={3}>
        <label>Op</label>
        <select>{op}</select>
      </Col>
      <Col md={3}>
        <label>Value</label>
        <input type="text" placeholder={value} />
      </Col>
      <Button
        style={{ color: "red", backgroundColor: "light-gray", margin: "1-tb" }}
        onClick={onRemove}
      >
        Remove The Row
      </Button>
    </Row>
  );
};

// Define a custom component for a group of condition fields
const ConditionGroup = ({ onAdd, onRemove }) => {
  // Use useState to store the condition rows in the group
  const [rows, setRows] = useState([]);

  // Define a function to add a new row to the group
  const addRow = () => {
    // Get the values from the selectCondition array
    const source = selectCondition[0];
    const attribute =
      source === "Request" ? requestAttribute : groupAttribute;
    const op = source === "Request" ? requestOp : groupOp;
    const value = source === "Request" ? "requestValue" : "groupValue";

    // Create a new row object with a unique id
    const newRow = {
      id: Math.random().toString(36).substr(2, 9),
      source,
      attribute,
      op,
      value,
    };

    // Update the state with the new row
    setRows((prevRows) => [...prevRows, newRow]);
  };

  // Define a function to remove a row from the group by id
  const removeRow = (id) => {
    // Filter out the row with the given id
    setRows((prevRows) => prevRows.filter((row) => row.id !== id));
  };

  return (
    <Row className="line-border">
      <label>Add Condition</label>
      <Button
        style={{ backgroundColor: "light-blue" }}
        value="addCondition"
        onClick={addRow}
      >
        Add Condition
      </Button>
      {rows.map((row) => (
        <ConditionRow
          key={row.id}
          source={row.source}
          attribute={row.attribute}
          op={row.op}
          value={row.value}
          onRemove={() => removeRow(row.id)}
        />
      ))}
      <Button onClick={onRemove}>Remove Group</Button>
    </Row>
  );
};

// Define the main component for the rule creation
const RuleCreation = () => {
  // Use useState to store the condition groups
  const [groups, setGroups] = useState([]);

  // Use useState to store the select operations
  const [operations, setOperations] = useState([]);

  // Define a function to add a new group
  const addGroup = () => {
    // Create a new group object with a unique id
    const newGroup = {
      id: Math.random().toString(36).substr(2, 9),
    };

    // Update the state with the new group
    setGroups((prevGroups) => [...prevGroups, newGroup]);
  };

  // Define a function to remove a group by id
  const removeGroup = (id) => {
    // Filter out the group with the given id
    setGroups((prevGroups) => prevGroups.filter((group) => group.id !== id));
  };

  // Define a function to handle the change of select operation
  const handleOperationChange = (index, value) => {
    // Update the state with the new value at the given index
    setOperations((prevOperations) => {
      const newOperations = [...prevOperations];
      newOperations[index] = value;
      return newOperations;
    });
  };

  // Define a function to handle the submit of the rule creation
  const handleSubmit = () => {
    // Map all the rows data in the below sequence
    let allData = "";
    for (let i = 0; i < groups.length; i++) {
      allData += `selectCondition${i + 1}:Row${i + 1}`;
      if (i < groups.length - 1) {
        allData += ` + selectOperation:Row${i + 2}`;
      }
    }
    // Do something with the allData
    console.log(allData);
  };

  return (
    <Container className="line-border">
      <label>Add Condition</label>
      <Button
        style={{ backgroundColor: "light-blue" }}
        value="addCondition"
        onClick={addGroup}
      >
        Add Condition
      </Button>
      <label>Add Group of Condition</label>
      <Button
        style={{ backgroundColor: "light-blue" }}
        value="addGroupCondition"
        onClick={addGroup}
      >
        Add Group of Condition
      </Button>
      {groups.map((group, index) => (
        <div key={group.id}>
          {index > 0 && (
            <Row className="dash-border">
              <label>Select Operation</label>
              <select
                value={operations[index - 1]}
                onChange={(e) =>
                  handleOperationChange(index - 1, e.target.value)
                }
              >
                {selectOperation.map((op) => (
                  <option key={op} value={op}>
                    {op}
                  </option>
                ))}
              </select>
            </Row>
          )}
          <ConditionGroup onRemove={() => removeGroup(group.id)} />
        </div>
      ))}
      <Button onClick={handleSubmit}>Submit</Button>
    </Container>
  );
};

export default RuleCreation;
