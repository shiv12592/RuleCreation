import React, { useState } from "react";
import { Container, Row, Col, Button, Form } from "react-bootstrap";

const RuleCreation = () => {
  const selectCondition = ["select", "Request", "Group"];
  const requestAttribute = ["select", "rqAtt1", "reqAtt2"];
  const groupAttribute = ["select", "grpAtt1", "grpAtt2"];
  const requestOp = ["select", "equal", "noEqual"];
  const groupOp = ["select", "and", "or", "not"];
  const selectOperation = ["select", "AND", "OR"];

  const [ruleConditions, setRuleConditions] = useState([]);

  const handleAddCondition = () => {
    setRuleConditions([
      ...ruleConditions,
      {
        source: "select",
        requestAttribute: "select",
        requestOp: "select",
        value: "",
        operation: "select",
      },
    ]);
  };

  const handleAddGroup = () => {
    setRuleConditions([
      ...ruleConditions,
      {
        group: [
          {
            source: "select",
            requestAttribute: "select",
            requestOp: "select",
            value: "",
            operation: "select",
          },
        ],
        operation: "select",
      },
    ]);
  };

  const handleRemoveCondition = (index) => {
    const newRuleConditions = [...ruleConditions];
    newRuleConditions.splice(index, 1);
    setRuleConditions(newRuleConditions);
  };

  const handleRemoveGroup = (index) => {
    const newRuleConditions = [...ruleConditions];
    newRuleConditions.splice(index, 1);
    setRuleConditions(newRuleConditions);
  };

  const handleAddConditionInGroup = (groupIndex) => {
    const newRuleConditions = [...ruleConditions];
    newRuleConditions[groupIndex].group.push({
      source: "select",
      requestAttribute: "select",
      requestOp: "select",
      value: "",
      operation: "select",
    });
    setRuleConditions(newRuleConditions);
  };

  const handleRemoveConditionInGroup = (groupIndex, conditionIndex) => {
    const newRuleConditions = [...ruleConditions];
    newRuleConditions[groupIndex].group.splice(conditionIndex, 1);
    setRuleConditions(newRuleConditions);
  };

  const handleChangeCondition = (index, field, value) => {
    const newRuleConditions = [...ruleConditions];
    newRuleConditions[index][field] = value;
    setRuleConditions(newRuleConditions);
  };

  const handleChangeConditionInGroup = (groupIndex, conditionIndex, field, value) => {
    const newRuleConditions = [...ruleConditions];
    newRuleConditions[groupIndex].group[conditionIndex][field] = value;
    setRuleConditions(newRuleConditions);
  };

  const handleSubmit = () => {
    console.log(JSON.stringify(ruleConditions, null, 2));
  };

  const renderCondition = (condition, index) => {
    return (
      <Row key={index} className="mb-2 border p-3">
        <Col md={3}>
          <Form.Label>Source</Form.Label>
          <Form.Control as="select" value={condition.source} onChange={(e) => handleChangeCondition(index, "source", e.target.value)}>
            {selectCondition.map((option, i) => (
              <option key={i} value={option}>
                {option}
              </option>
            ))}
          </Form.Control>
        </Col>
        <Col md={3}>
          <Form.Label>Attribute</Form.Label>
          <Form.Control as="select" value={condition.requestAttribute} onChange={(e) => handleChangeCondition(index, "requestAttribute", e.target.value)}>
            {requestAttribute.map((option, i) => (
              <option key={i} value={option}>
                {option}
              </option>
            ))}
          </Form.Control>
        </Col>
        <Col md={3}>
          <Form.Label>Request Op</Form.Label>
          <Form.Control as="select" value={condition.requestOp} onChange={(e) => handleChangeCondition(index, "requestOp", e.target.value)}>
            {requestOp.map((option, i) => (
              <option key={i} value={option}>
                {option}
              </option>
            ))}
          </Form.Control>
        </Col>
        <Col md={3}>
          <Form.Label>Value</Form.Label>
          <Form.Control type="text" placeholder="reqValue" value={condition.value} onChange={(e) => handleChangeCondition(index, "value", e.target.value)} />
        </Col>
        <Button variant="danger" className="ml-2" onClick={() => handleRemoveCondition(index)}>
          Remove The Row
        </Button>
      </Row>
    );
  };

  const renderGroup = (group, index) => {
    return (
      <Row key={index} className="mb-2 border p-3">
        <Col md={12}>
          <Form.Label>Add Condition</Form.Label>
          <Button variant="primary" className="ml-2" onClick={() => handleAddConditionInGroup(index)}>
            Add Condition
          </Button>
        </Col>
        {group.group.map((condition, i) => (
          <Col md={12} key={i}>
            {renderConditionInGroup(condition, index, i)}
          </Col>
        ))}
        <Col md={12}>
          <Button variant="danger" className="ml-2" onClick={() => handleRemoveGroup(index)}>
            Remove Group
          </Button>
        </Col>
      </Row>
    );
  };

  const renderConditionInGroup = (condition, groupIndex, conditionIndex) => {
    return (
      <Row key={conditionIndex} className="mb-2 border p-3">
        {/* Similar to renderCondition with adjustments */}
      </Row>
    );
  };

  return (
    <Container className="mt-3">
      <Row className="mb-2">
        <Col md={12}>
          <Form.Label>Add Condition</Form.Label>
          <Button variant="primary" className="ml-2" onClick={handleAddCondition}>
            Add Condition
          </Button>
        </Col>
      </Row>
      <Row className="mb-2">
        <Col md={12}>
          <Form.Label>Add Group of Conditions</Form.Label>
          <Button variant="primary" className="ml-2" onClick={handleAddGroup}>
            Add Group
          </Button>
        </Col>
      </Row>
      {ruleConditions.map((condition, index) => (
        <Row key={index} className="mb-2">
          <Col md={12}>{condition.group ? renderGroup(condition, index) : renderCondition(condition, index)}</Col>
          <Col md={12}>
            <Form.Label>Operation</Form.Label>
            <Form.Control as="select" value={condition.operation} onChange={(e) => handleChangeOperation(index, e.target.value)}>
              {selectOperation.map((option, i) => (
                <option key={i} value={option}>
                  {option}
                </option>
              ))}
            </Form.Control>
          </Col>
        </Row>
      ))}
      <Row className="mb-2">
        <Col md={12}>
          <Button variant="success" className="ml-2" onClick={handleSubmit}>
            Submit
          </Button>
        </Col>
      </Row>
    </Container>
  );
};

export default RuleCreation;
