import React, { useState } from "react";
import { Container, Row, Col, Button, Form } from "react-bootstrap";

const selectConditionData = ["select", "Request", "Group"];
const requestAttributeData = ["select", "rqAtt1", "reqAtt2"];
const groupAttributeData = ["select", "grpAtt1", "grpAtt2"];
const requestOpData = ["select", "equal", "noEqual"];
const groupOpData = ["select", "and", "or", "not"];
const selectOperationData = ["select", "AND", "OR"];

const ConditionFields = ({ condition, index, handleChange, handleRemove }) => {
  return (
    <Row className="mb-3 border">
      <Col md={3}>
        <Form.Label className="mx-2">Source</Form.Label>
        <Form.Select
          value={condition.selectCondition}
          onChange={(e) => handleChange(e, index, "selectCondition")}
        >
          {selectConditionData.map((item, i) => (
            <option key={i} value={item}>
              {item}
            </option>
          ))}
        </Form.Select>
      </Col>
      {condition.selectCondition === "Request" && (
        <>
          <Col md={3}>
            <Form.Label className="mx-2">Attribute</Form.Label>
            <Form.Select
              value={condition.requestAttribute}
              onChange={(e) => handleChange(e, index, "requestAttribute")}
            >
              {requestAttributeData.map((item, i) => (
                <option key={i} value={item}>
                  {item}
                </option>
              ))}
            </Form.Select>
          </Col>
          <Col md={3}>
            <Form.Label className="mx-2">Request Op</Form.Label>
            <Form.Select
              value={condition.requestOp}
              onChange={(e) => handleChange(e, index, "requestOp")}
            >
              {requestOpData.map((item, i) => (
                <option key={i} value={item}>
                  {item}
                </option>
              ))}
            </Form.Select>
          </Col>
          <Col md={3}>
            <Form.Label className="mx-2">Value</Form.Label>
            <Form.Control
              type="text"
              placeholder="reqValue"
              value={condition.requestValue}
              onChange={(e) => handleChange(e, index, "requestValue")}
            />
          </Col>
        </>
      )}
      {condition.selectCondition === "Group" && (
        <>
          <Col md={3}>
            <Form.Label className="mx-2">Attribute</Form.Label>
            <Form.Select
              value={condition.groupAttribute}
              onChange={(e) => handleChange(e, index, "groupAttribute")}
            >
              {groupAttributeData.map((item, i) => (
                <option key={i} value={item}>
                  {item}
                </option>
              ))}
            </Form.Select>
          </Col>
          <Col md={3}>
            <Form.Label className="mx-2">Group Op</Form.Label>
            <Form.Select
              value={condition.groupOp}
              onChange={(e) => handleChange(e, index, "groupOp")}
            >
              {groupOpData.map((item, i) => (
                <option key={i} value={item}>
                  {item}
                </option>
              ))}
            </Form.Select>
          </Col>
          <Col md={3}>
            <Form.Label className="mx-2">Value</Form.Label>
            <Form.Control
              type="text"
              placeholder="grpValue"
              value={condition.groupValue}
              onChange={(e) => handleChange(e, index, "groupValue")}
            />
          </Col>
        </>
      )}
      <Col md={3}>
        <Button
          variant="danger"
          className="mt-4 mx-2"
          onClick={() => handleRemove(index)}
        >
          Remove The Row
        </Button>
      </Col>
    </Row>
  );
};

const GroupOfConditionFields = ({
  group,
  index,
  handleChange,
  handleAddCondition,
  handleRemoveCondition,
  handleRemoveGroup,
}) => {
  return (
    <Row className="mb-3 border">
      <Col md={12}>
        <Button
          variant="primary"
          className="mt-2 mx-2"
          onClick={() => handleAddCondition(index)}
        >
          Add Condition
        </Button>
        <Button
          variant="danger"
          className="mt-2 mx-2"
          onClick={() => handleRemoveGroup(index)}
        >
          Remove Group
        </Button>
      </Col>
      {group.conditions.map((condition, i) => (
        <Col md={12} key={i}>
          <ConditionFields
            condition={condition}
            index={i}
            handleChange={(e, j, field) =>
              handleChange(e, index, j, field, "conditions")
            }
            handleRemove={() => handleRemoveCondition(index, i)}
          />
          {i < group.conditions.length - 1 && (
            <Row className="mb-3 border-dashed">
              <Col md={3}>
                <Form.Label className="mx-2">Select Operation</Form.Label>
                <Form.Select
                  value={condition.selectOperation}
                  onChange={(e) =>
                    handleChange(e, index, i, "selectOperation", "conditions")
                  }
                >
                  {selectOperationData.map((item, k) => (
                    <option key={k} value={item}>
                      {item}
                    </option>
                  ))}
                </Form.Select>
              </Col>
            </Row>
          )}
        </Col>
      ))}
    </Row>
  );
};

const MyComponent = () => {
  const [allData, setAllData] = useState({
    conditions: [
      {
        selectCondition: "select",
        requestAttribute: "select",
        requestOp: "select",
        requestValue: "",
        groupAttribute: "select",
        groupOp: "select",
        groupValue: "",
        selectOperation: "select",
      },
    ],
    groups: [],
  });

  const handleChange = (e, i, j, field, type) => {
    const value = e.target.value;
    setAllData((prevData) => {
      const newData = { ...prevData };
      if (type === "conditions") {
        newData.conditions[i][field] = value;
      } else if (type === "groups") {
        newData.groups[i][field] = value;
      } else if (type === "conditionsInGroup") {
        newData.groups[i].conditions[j][field] = value;
      }
      return newData;
    });
  };

  const handleAddCondition = (i) => {
    setAllData((prevData) => {
      const newData = { ...prevData };
      if (i === undefined) {
        newData.conditions.push({
          selectCondition: "select",
          requestAttribute: "select",
          requestOp: "select",
          requestValue: "",
          groupAttribute: "select",
          groupOp: "select",
          groupValue: "",
          selectOperation: "select",
        });
      } else {
       
        newData.groups[i].conditions.push({
          selectCondition: "select",
          requestAttribute: "select",
          requestOp: "select",
          requestValue: "",
          groupAttribute: "select",
          groupOp: "select",
          groupValue: "",
          selectOperation: "select",
        });
      }
      return newData;
    });
  };

  const handleRemoveCondition = (i, j) => {
    setAllData((prevData) => {
      const newData = { ...prevData };
      if (j === undefined) {
        newData.conditions.splice(i, 1);
      } else {
        newData.groups[i].conditions.splice(j, 1);
      }
      return newData;
    });
  };

  const handleAddGroup = () => {
    setAllData((prevData) => {
      const newData = { ...prevData };
      newData.groups.push({
        conditions: [],
        selectOperation: "select",
      });
      return newData;
    });
  };

  const handleRemoveGroup = (i) => {
    setAllData((prevData) => {
      const newData = { ...prevData };
      newData.groups.splice(i, 1);
      return newData;
    });
  };

  const handleSubmit = () => {
    console.log("Submitted Data:", allData);
    // Additional logic to handle the submitted data
  };

  return (
    <Container>
      <Row className="mt-3">
        <Col md={12}>
          <Button variant="primary" className="mx-2" onClick={handleAddCondition}>
            Add Condition
          </Button>
          <Button variant="primary" className="mx-2" onClick={handleAddGroup}>
            Add Group
          </Button>
        </Col>
      </Row>

      {allData.conditions.map((condition, i) => (
        <ConditionFields
          key={i}
          condition={condition}
          index={i}
          handleChange={(e, j, field) => handleChange(e, i, j, field, "conditions")}
          handleRemove={() => handleRemoveCondition(i)}
        />
      ))}

      {allData.groups.map((group, i) => (
        <GroupOfConditionFields
          key={i}
          group={group}
          index={i}
          handleChange={(e, j, field) => handleChange(e, i, j, field, "groups")}
          handleAddCondition={() => handleAddCondition(i)}
          handleRemoveCondition={(j) => handleRemoveCondition(i, j)}
          handleRemoveGroup={() => handleRemoveGroup(i)}
        />
      ))}

      <Row className="mt-3">
        <Col md={12}>
          <Button variant="success" onClick={handleSubmit}>
            Submit
          </Button>
        </Col>
      </Row>
    </Container>
  );
};

export default MyComponent;
