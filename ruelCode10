import React, { useState } from "react";
import { Container, Row, Col, Button } from "react-bootstrap";

// The data for use in useState
const selectCondition = ["select", "Request", "Group"];
const requestAttribute = ["select", "rqAtt1", "reqAtt2"];
const groupAttribute = ["select", "grpAtt1", "grpAtt2"];
const requestOp = ["select", "equal", "noEqual"];
const groupOp = ["select", "and", "or", "not"];
const selectOperation = ["select", "AND", "OR"];

// A custom component for a single row of condition fields
const ConditionRow = ({
  condition,
  index,
  handleSelectChange,
  handleInputChange,
  handleRemoveRow,
}) => {
  return (
    <Row className="margin-1-tb line-border">
      <Col md={3}>
        <label className="margin-1-lr">Source</label>
        <select
          value={condition.source}
          onChange={(e) => handleSelectChange(e, index, "source")}
        >
          {selectCondition.map((option) => (
            <option key={option} value={option}>
              {option}
            </option>
          ))}
        </select>
      </Col>
      <Col md={3}>
        <label className="margin-1-lr">Attribute</label>
        <select
          value={condition.attribute}
          onChange={(e) => handleSelectChange(e, index, "attribute")}
        >
          {condition.source === "Request"
            ? requestAttribute.map((option) => (
                <option key={option} value={option}>
                  {option}
                </option>
              ))
            : condition.source === "Group"
            ? groupAttribute.map((option) => (
                <option key={option} value={option}>
                  {option}
                </option>
              ))
            : null}
        </select>
      </Col>
      <Col md={3}>
        <label className="margin-1-lr">Operation</label>
        <select
          value={condition.operation}
          onChange={(e) => handleSelectChange(e, index, "operation")}
        >
          {condition.source === "Request"
            ? requestOp.map((option) => (
                <option key={option} value={option}>
                  {option}
                </option>
              ))
            : condition.source === "Group"
            ? groupOp.map((option) => (
                <option key={option} value={option}>
                  {option}
                </option>
              ))
            : null}
        </select>
      </Col>
      <Col md={3}>
        <label className="margin-1-lr">Value</label>
        <input
          type="text"
          placeholder="requestValue"
          value={condition.value}
          onChange={(e) => handleInputChange(e, index)}
        />
      </Col>
      <Button
        variant="danger"
        className="font-color-red background-light-gray margin-1-tb"
        onClick={() => handleRemoveRow(index)}
      >
        Remove The Row
      </Button>
    </Row>
  );
};

// A custom component for a group of condition rows
const ConditionGroup = ({
  group,
  index,
  handleSelectChange,
  handleInputChange,
  handleAddRow,
  handleRemoveRow,
  handleRemoveGroup,
}) => {
  return (
    <Row className="line-border">
      <label className="margin-1-lr">Add Condition</label>
      <Button
        variant="primary"
        className="background-light-blue"
        onClick={() => handleAddRow(index)}
      >
        Add Condition
      </Button>
      {group.conditions.map((condition, i) => (
        <ConditionRow
          key={i}
          condition={condition}
          index={i}
          handleSelectChange={handleSelectChange}
          handleInputChange={handleInputChange}
          handleRemoveRow={handleRemoveRow}
        />
      ))}
      <Button
        variant="danger"
        className="font-color-red background-light-gray margin-1-tb"
        onClick={() => handleRemoveGroup(index)}
      >
        Remove Group
      </Button>
    </Row>
  );
};

// The main component for the rule creation
const RuleCreation = () => {
  // The state for the conditions and groups
  const [conditions, setConditions] = useState([
    {
      source: "select",
      attribute: "select",
      operation: "select",
      value: "",
    },
  ]);
  const [groups, setGroups] = useState([]);

  // The state for the select operation
  const [selectOp, setSelectOp] = useState("select");

  // The state for the all data
  const [allData, setAllData] = useState([]);

  // The handler functions for the condition rows
  const handleSelectChange = (e, index, field) => {
    const newConditions = [...conditions];
    newConditions[index][field] = e.target.value;
    setConditions(newConditions);
  };

  const handleInputChange = (e, index) => {
    const newConditions = [...conditions];
    newConditions[index].value = e.target.value;
    setConditions(newConditions);
  };

  const handleAddCondition = () => {
    setConditions([
      ...conditions,
      {
        source: "select",
        attribute: "select",
        operation: "select",
        value: "",
      },
    ]);
  };

  const handleRemoveRow = (index) => {
    const newConditions = [...conditions];
    newConditions.splice(index, 1);
    setConditions(newConditions);
  };

  // The handler functions for the condition groups
  const handleAddGroup = () => {
    setGroups([
      ...groups,
      {
        conditions: [
          {
            source: "select",
            attribute: "select",
            operation: "select",
            value: "",
          },
        ],
      },
    ]);
  };

  const handleRemoveGroup = (index) => {
    const newGroups = [...groups];
    newGroups.splice(index, 1);
    setGroups(newGroups);
  };

  // The handler function for the select operation
  const handleSelectOpChange = (e) => {
    setSelectOp(e.target.value);
  };

  // The handler function for the submit button
  const handleSubmit = () => {
    // Map all the rows data in the below sequence
    // AllData = selectCondition1:Row1 + selectOperation:Row2 + addGroupCondition1:Row3 + selectOperation :Row4+ ...
    let data = [];
    data.push(conditions[0]);
    for (let i = 1; i < conditions.length; i++) {
      data.push(selectOp);
      data.push(conditions[i]);
    }
    for (let i = 0; i < groups.length; i++) {
      data.push(selectOp);
      data.push(groups[i].conditions[0]);
      for (let j = 1; j < groups[i].conditions.length; j++) {
        data.push(selectOp);
        data.push(groups[i].conditions[j]);
      }
    }
    // Set the all data state and show log in json format
    setAllData(data);
    console.log(JSON.stringify(data, null, 2));
  };

  return (
    <div className="col-md-12">
      <Container className="col-md-12">
        <label className="margin-1-lr">Add Condition</label>
        <Button
          variant="primary"
          className="background-light-blue"
          onClick={handleAddCondition}
        >
          Add Condition
        </Button>
        <label className="margin-1-lr">Add Group of Condition</label>
        <Button
          variant="primary"
          className="background-light-blue"
          onClick={handleAddGroup}
        >
          Add Group Condition
        </Button>
        {conditions.map((condition, index) => (
          <ConditionRow
            key={index}
            condition={condition}
            index={index}
            handleSelectChange={handleSelectChange}
            handleInputChange={handleInputChange}
            handleRemoveRow={handleRemoveRow}
          />
        ))}
        {groups.map((group, index) => (
          <ConditionGroup
            key={index}
            group={group}
            index={index}
            handleSelectChange={handleSelectChange}
            handleInputChange={handleInputChange}
            handleAddRow={handleAddCondition}
            handleRemoveRow={handleRemoveRow}
            handleRemoveGroup={handleRemoveGroup}
          />
        ))}
        <Row className="dash-border">
          <label className="margin-1-lr">Select Operation</label>
          <select value={selectOp} onChange={handleSelectOpChange}>
            {selectOperation.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
        </Row>
        <Button variant="primary" onClick={handleSubmit}>
          Submit
        </Button>
      </Container>
    </div>
  );
};

export default RuleCreation;
